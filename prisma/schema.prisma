// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  role          UserRole
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  teacher       Teacher?
  parent        Parent?
  messages      Message[]
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  firstName   String
  lastName    String
  phone       String?
  avatar      String?
  address     String
  latitude    Float
  longitude   Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Teacher {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  qualification   String
  experience      Int
  subjects        String[]
  hourlyRate      Float
  availability    Json
  verified        Boolean   @default(false)
  rating          Float     @default(0)
  bookings        Booking[]
  reviews         Review[]
}

model Parent {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  students    Student[]
  bookings    Booking[]
}

model Student {
  id          String    @id @default(cuid())
  parentId    String
  parent      Parent    @relation(fields: [parentId], references: [id])
  firstName   String
  lastName    String
  age         Int
  grade       String
  subjects    String[]
  bookings    Booking[]
}

model Booking {
  id          String    @id @default(cuid())
  teacherId   String
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  parentId    String
  parent      Parent    @relation(fields: [parentId], references: [id])
  studentId   String
  student     Student   @relation(fields: [studentId], references: [id])
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus
  amount      Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  payment     Payment?
  review      Review?
}

model Payment {
  id          String    @id @default(cuid())
  bookingId   String    @unique
  booking     Booking   @relation(fields: [bookingId], references: [id])
  amount      Float
  status      PaymentStatus
  provider    String
  reference   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id          String    @id @default(cuid())
  bookingId   String    @unique
  booking     Booking   @relation(fields: [bookingId], references: [id])
  teacherId   String
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
}

model Message {
  id          String    @id @default(cuid())
  senderId    String
  sender      User      @relation(fields: [senderId], references: [id])
  content     String
  createdAt   DateTime  @default(now())
}

enum UserRole {
  ADMIN
  TEACHER
  PARENT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}